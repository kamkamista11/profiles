{"version":3,"sources":["views/ComponentWrapper.js","views/home/Home.js","components/cards/Card.js","utils/custom/validation.js","utils/custom/sessions.js","routes/routes.js","views/User/User.js","views/User/New.js","reportWebVitals.js","index.js"],"names":["ComponentWrapper","route","PageHeader","id","height","textColor","B400","isFixed","PrimaryButton","to","style","flex","path","render","props","component","routes","Home","Card","person","name","lastname","email","phone","date","about","image","className","src","width","alt","validateEmail","match","vlidateDate","validateImageSize","size","setSession","key","data","stored","JSON","parse","window","sessionStorage","getItem","push","setItem","stringify","routeList","useState","people","setPeople","loading","setLoading","useEffect","fetchData","map","index","setImage","fileInput","useRef","onChange","files","current","reader","FileReader","onloadend","result","readAsDataURL","onSubmitHandler","a","errors","undefined","number","dataToSave","history","display","maxWidth","margin","flexDirection","Form","onSubmit","formProps","FormHeader","title","FormSection","Field","defaultValue","label","isRequired","fieldProps","error","DatePicker","ref","type","accept","FormFooter","appearance","createBrowserHistory","Routes","basename","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ce35b157.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport { Route, Link } from \"react-router-dom\";\n\nimport { B400 } from \"@atlaskit/theme/colors\";\nimport { AtlassianWordmark } from \"@atlaskit/logo\";\nimport {\n  PageLayout,\n  Main,\n  Content,\n  TopNavigation,\n} from \"@atlaskit/page-layout\";\nimport PageHeader from \"@atlaskit/page-header\";\nimport {\n  PrimaryButton,\n} from \"@atlaskit/atlassian-navigation\";\n\nexport const ComponentWrapper = (route) => {\n  return (\n    <Fragment>\n      <PageHeader id=\"PageHeader\" height={60}>\n        <AtlassianWordmark textColor={B400} />\n      </PageHeader>\n\n      <TopNavigation id=\"navigation\" height={60} isFixed={false}>\n        <PrimaryButton>\n          <Link to=\"/\">Home</Link>\n        </PrimaryButton>\n        <PrimaryButton>\n          <Link to=\"/user\">User</Link>\n        </PrimaryButton>\n        <PrimaryButton>\n          <Link to=\"/new\">New</Link>\n        </PrimaryButton>\n      </TopNavigation>\n      <div style={{ flex: \"1\" }}>\n        <PageLayout>\n          <Content>\n            <Main id=\"main\">\n              <Route\n                path={route.path}\n                render={(props) => (\n                  <route.component {...props} routes={route.routes} />\n                )}\n              />\n            </Main>\n          </Content>\n        </PageLayout>\n      </div>\n      <footer>Footer at the bottom</footer>\n    </Fragment>\n  );\n};\n","import React from 'react'\n\nexport const Home = () => {\n  return (\n    <div>\n      <p> At Home Page</p>\n    </div>\n  )\n}\n","import React from \"react\";\nimport \"./card.scss\";\n\nexport const Card = ({person}) => {\n  const {name, lastname, email, phone, date, about, image} = person;\n  return (\n    <div className=\"profile\">\n      <div className=\"profile__image\">\n        <div className=\"circle-1\"></div>\n        <div className=\"circle-2\"></div>\n        <img\n          src={image}\n          width=\"70\"\n          height=\"70\"\n          alt=\"img\"\n        />\n      </div>\n\n      <p className=\"profile__name\">{`${name} ${lastname}`}</p>\n      <p className=\"profile__info\">{email}</p>\n      <p className=\"profile__info\">{phone}</p>\n      <p className=\"profile__info\">{date}</p>\n      <p className=\"profile__about\">{about}</p>\n    </div>\n  );\n};\n","export const validateEmail = (email) =>\n  email.match(\n    /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/\n  );\n\nexport const validatePhoneNumber = (number) => number.match(/^\\d{9}$/);\n\nexport const vlidateDate = (date) => date.match(/(\\d{4})-(\\d{2})-(\\d{2})/);\n\nexport const validateImage = (image) => image;\n\nexport const validateImageSize = ({size}) => size < 300000;\n","export const setSession = (key, data) => {\n    let stored = JSON.parse(window.sessionStorage.getItem(key)) || [];\n    stored.push(data);\n    window.sessionStorage.setItem(key, JSON.stringify(stored));\n  }","import React from \"react\";\nimport { BrowserRouter, Switch } from \"react-router-dom\";\nimport { createBrowserHistory } from \"history\";\nimport { Router } from \"react-router\";\nimport { ComponentWrapper } from \"../views/ComponentWrapper\";\nimport { Home } from \"../views/home/Home\";\nimport { User } from \"../views/User/User\";\nimport { New } from \"../views/User/New\";\n\nconst routeList = [\n  { path: \"/home\", component: Home },\n  { path: \"/user\", component: User },\n  { path: \"/new\", component: New },\n  { path: \"/\", component: Home },\n];\nconst history = createBrowserHistory();\n\nexport const Routes = () => {\n  return (\n    <Router history={history}>\n      <BrowserRouter basename=\"/\">\n        <Switch>\n          {routeList.map((route, key) => (\n            <ComponentWrapper key={key} {...route} />\n          ))}\n        </Switch>\n      </BrowserRouter>\n    </Router>\n  );\n};\n","import React, { Fragment, useEffect, useState } from \"react\";\nimport { Card } from \"../../components/cards/Card\";\nimport Spinner from \"@atlaskit/spinner\";\n\nexport const User = () => {\n  const [people, setPeople] = useState([]);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    setLoading(true);\n    if (sessionStorage.people) {\n      fetchData();\n    }\n    setLoading(false);\n  }, []);\n\n  const fetchData = () => {\n    setPeople(JSON.parse(sessionStorage.people));\n  };\n  return (\n    <Fragment>\n      {!loading ? (\n        people.map((person, index) => <Card key={index} person={person} />)\n      ) : (\n        <Spinner />\n      )}\n    </Fragment>\n  );\n};\n","import React, { Fragment, useState, useRef } from \"react\";\nimport {\n  validateEmail,\n  validatePhoneNumber,\n  vlidateDate,\n  validateImage,\n  validateImageSize\n} from \"../../utils/custom/validation\";\nimport { setSession } from \"../../utils/custom/sessions\";\nimport Form, {\n  FormHeader,\n  FormSection,\n  FormFooter,\n  ErrorMessage,\n  Field,\n} from \"@atlaskit/form\";\nimport { DatePicker } from \"@atlaskit/datetime-picker\";\n\nimport Button from \"@atlaskit/button\";\nimport TextField from \"@atlaskit/textfield\";\nimport TextArea from \"@atlaskit/textarea\";\n\nexport const New = (props) => {\n  const style = {\n    display: \"flex\",\n    width: \"400px\",\n    maxWidth: \"100%\",\n    margin: \"0 auto\",\n    flexDirection: \"column\",\n  };\n  const [image, setImage] = useState(\"\");\n  const fileInput = useRef(\"\");\n\n  const onChange = () => {\n    const {\n      current: { files },\n    } = fileInput;\n    const reader = new FileReader();\n    reader.onloadend = () => {\n      setImage(reader.result);\n    };\n    files[0] && reader.readAsDataURL(files[0]);\n  };\n\n  const onSubmitHandler = async (data) => {\n    const { email, phone, date } = data;\n    const {\n      current: { files },\n    } = fileInput;\n    const errors = {\n      email: validateEmail(email)\n        ? undefined\n        : \"Wrong email, please make sure it is correct\",\n      phone: validatePhoneNumber(phone)\n        ? undefined\n        : \"Wrong phone number, please make sure it is correct (e.g. 500400300)\",\n      date: vlidateDate(date) ? undefined : \"Please select date\",\n      image: validateImage(files[0]) && validateImageSize(files[0])\n        ? undefined\n        : \"Please upload image (max - 300KB)\",\n    };\n    if (!errors.email && !errors.phone && !errors.date && !errors.image) {\n      const dataToSave = {\n        ...data,\n        image,\n      };\n      setSession(\"people\", dataToSave);\n      return props.history.push('/user')\n    }\n    return errors;\n  };\n  return (\n    <section style={style}>\n      <Form onSubmit={onSubmitHandler}>\n        {({ formProps }) => (\n          <form {...formProps}>\n            <FormHeader title=\"User\" />\n            <FormSection title=\"User Data\">\n              <Field name=\"name\" defaultValue=\"\" label=\"Name\" isRequired>\n                {({ fieldProps }) => <TextField {...fieldProps} />}\n              </Field>\n              <Field\n                name=\"lastname\"\n                defaultValue=\"\"\n                label=\"Last name\"\n                isRequired\n              >\n                {({ fieldProps }) => <TextField {...fieldProps} />}\n              </Field>\n              <Field name=\"email\" defaultValue=\"\" label=\"Email\" isRequired>\n                {({ fieldProps, error }) => (\n                  <Fragment>\n                    <TextField {...fieldProps} />\n                    {error && <ErrorMessage>{error}</ErrorMessage>}\n                  </Fragment>\n                )}\n              </Field>\n              <Field name=\"phone\" defaultValue=\"\" label=\"Phone\" isRequired>\n                {({ fieldProps, error }) => (\n                  <Fragment>\n                    <TextField {...fieldProps} />\n                    {error && <ErrorMessage>{error}</ErrorMessage>}\n                  </Fragment>\n                )}\n              </Field>\n              <Field name=\"date\" defaultValue=\"\" label=\"Birthday\" isRequired>\n                {({ fieldProps, error }) => (\n                  <Fragment>\n                    <label>\n                     <DatePicker {...fieldProps} id=\"datepicker\" />\n                    </label>\n                    {error && <ErrorMessage>{error}</ErrorMessage>}\n                  </Fragment>\n                )}\n              </Field>\n              <Field name=\"about\" defaultValue=\"\" label=\"About\">\n                {({ fieldProps }) => <TextArea {...fieldProps} />}\n              </Field>\n              <Field name=\"image\" defaultValue=\"\" label=\"Image\" isRequired>\n                {({ fieldProps, error }) => ( \n                  <Fragment>\n                    <input\n                      onChange={onChange}\n                      ref={fileInput}\n                      id=\"Image\"\n                      name=\"Image\"\n                      type=\"file\"\n                      alt=\"img\"\n                      accept=\"image/png, image/jpeg, image/jpg\"\n                      style={{display: 'flex'}}\n                    ></input>\n                    {error && <ErrorMessage>{error}</ErrorMessage>}\n                  </Fragment>\n                )}\n              </Field>\n            </FormSection>\n            <FormFooter>\n              <Button\n                type=\"submit\"\n                appearance=\"primary\"\n              >\n                Submit\n              </Button>\n            </FormFooter>\n          </form>\n        )}\n      </Form>\n    </section>\n  );\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {Routes} from './routes/routes';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <Routes />,\n  document.getElementById('root')\n);\n  \n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}